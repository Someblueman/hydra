#!/bin/sh
# Hydra - POSIX-compliant CLI for managing parallel AI coding sessions
# Wraps tmux â‰¥ 3.0 and git worktree

set -eu

# Global variables
# Ensure HOME is set to actual user home directory
if [ -z "${HOME:-}" ] || [ ! -d "${HOME:-}" ]; then
    HOME="$(cd ~ && pwd)"
fi
HYDRA_HOME="${HYDRA_HOME:-$HOME/.hydra}"
HYDRA_MAP="$HYDRA_HOME/map"
HYDRA_VERSION="1.1.0-dev"

# Source helper libraries
# Enhanced library detection with multiple fallback paths
# Try to resolve the real path of the hydra binary
HYDRA_BIN_PATH="$0"
if [ -L "$HYDRA_BIN_PATH" ]; then
    # Follow symlinks if possible (POSIX-compliant approach)
    if command -v readlink >/dev/null 2>&1; then
        # Try GNU readlink -f first, then BSD readlink
        HYDRA_BIN_PATH="$(readlink -f "$HYDRA_BIN_PATH" 2>/dev/null || readlink "$HYDRA_BIN_PATH" 2>/dev/null || echo "$HYDRA_BIN_PATH")"
    fi
fi

# Get the directory containing the hydra binary
if HYDRA_BIN_DIR="$(cd "$(dirname "$HYDRA_BIN_PATH")" 2>/dev/null && pwd)"; then
    : # Successfully got absolute path
else
    # Fallback to dirname if cd fails
    HYDRA_BIN_DIR="$(dirname "$HYDRA_BIN_PATH")"
fi

# Try multiple paths to find the library directory
if [ -d "$HYDRA_BIN_DIR/../lib" ] && [ -f "$HYDRA_BIN_DIR/../lib/git.sh" ]; then
    # Running from source - resolve to absolute path
    HYDRA_LIB_DIR="$(cd "$HYDRA_BIN_DIR/../lib" && pwd)"
elif [ -d "/usr/local/lib/hydra" ] && [ -f "/usr/local/lib/hydra/git.sh" ]; then
    # Installed location
    HYDRA_LIB_DIR="/usr/local/lib/hydra"
elif [ -n "${HYDRA_ROOT:-}" ] && [ -d "$HYDRA_ROOT/lib" ] && [ -f "$HYDRA_ROOT/lib/git.sh" ]; then
    # Environment variable override
    HYDRA_LIB_DIR="$HYDRA_ROOT/lib"
else
    echo "Error: Cannot find hydra library directory" >&2
    echo "Searched in:" >&2
    echo "  - $HYDRA_BIN_DIR/../lib (source)" >&2
    echo "  - /usr/local/lib/hydra (installed)" >&2
    [ -n "${HYDRA_ROOT:-}" ] && echo "  - $HYDRA_ROOT/lib (HYDRA_ROOT)" >&2
    echo "" >&2
    echo "Please ensure hydra is properly installed or set HYDRA_ROOT environment variable" >&2
    exit 1
fi

# shellcheck source=../lib/git.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/git.sh"
# shellcheck source=../lib/tmux.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/tmux.sh"
# shellcheck source=../lib/layout.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/layout.sh"
# shellcheck source=../lib/state.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/state.sh"
# shellcheck source=../lib/completion.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/completion.sh"
# shellcheck source=../lib/dashboard.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/dashboard.sh"
# shellcheck source=../lib/github.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/github.sh"

# Initialize Hydra home directory
init_hydra_home() {
    if [ ! -d "$HYDRA_HOME" ]; then
        mkdir -p "$HYDRA_HOME"
    fi
    if [ ! -f "$HYDRA_MAP" ]; then
        touch "$HYDRA_MAP"
    fi
}

# Display usage information
usage() {
    cat <<EOF
hydra - Manage parallel AI coding sessions with tmux and git worktree

Usage: hydra <command> [options]

Commands:
  spawn <branch>    Create a new worktree and tmux session
                    Options:
                      -l, --layout <layout>    Apply tmux layout
                      -n, --count <number>     Spawn multiple sessions (1-10)
                      --ai <tool>              Specify AI tool (claude, aider, gemini, etc.)
                      --agents <spec>          Mixed agents (e.g., "claude:2,aider:1")
  spawn --issue <#> Create a head from a GitHub issue
  list              List all active Hydra heads
  switch            Switch to a different head (interactive)
  kill <branch>     Remove a worktree and its tmux session
  regenerate        Restore tmux sessions for existing worktrees
  status            Show health status of all heads
  doctor            Check system performance
  dashboard         View all sessions in a single dashboard
  cycle-layout      Cycle through tmux pane layouts
  completion        Generate shell completion scripts
  version           Show version information

Options:
  -h, --help        Show this help message

Examples:
  hydra spawn feature-x                    # Create single session
  hydra spawn feature-x -n 3               # Create 3 sessions (feature-x-1, feature-x-2, feature-x-3)
  hydra spawn feature-x -n 3 --ai aider    # Create 3 sessions with aider
  hydra spawn feature-x --ai gemini        # Create session with Google Gemini CLI
  hydra spawn exp --agents "claude:2,aider:1"  # Create 2 claude + 1 aider sessions
  hydra spawn --issue 42                   # Create session from GitHub issue #42

Environment:
  HYDRA_HOME        Directory for runtime files (default: ~/.hydra)
  HYDRA_AI_COMMAND  Default AI tool (default: claude)
  HYDRA_ROOT        Override hydra installation path (for library discovery)
EOF
}

# Helper function to spawn a single session
# Usage: spawn_single <branch> <layout> [ai_tool]
spawn_single() {
    branch="$1"
    layout="${2:-default}"
    ai_tool="${3:-}"
    
    # Check tmux availability
    if ! check_tmux_version; then
        return 1
    fi
    
    # Check if we're in a git repository
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        echo "Error: Not in a git repository" >&2
        return 1
    fi
    
    # Get the repository root
    repo_root="$(git rev-parse --show-toplevel)"
    worktree_path="$repo_root/../hydra-$branch"
    
    # Check if branch already has a session
    existing_session="$(get_session_for_branch "$branch" 2>/dev/null || true)"
    if [ -n "$existing_session" ] && tmux_session_exists "$existing_session"; then
        echo "Error: Branch '$branch' already has an active session '$existing_session'" >&2
        echo "Use 'hydra switch' to switch to it" >&2
        return 1
    fi
    
    # Create worktree
    echo "Creating worktree for branch '$branch'..." >&2
    if ! create_worktree "$branch" "$worktree_path"; then
        return 1
    fi
    
    # Generate session name
    session="$(generate_session_name "$branch")"
    
    # Create tmux session
    echo "Creating tmux session '$session'..." >&2
    if ! create_session "$session" "$worktree_path"; then
        # Clean up worktree if session creation failed
        delete_worktree "$worktree_path" 2>/dev/null || true
        return 1
    fi
    
    # Add mapping
    if ! add_mapping "$branch" "$session"; then
        echo "Warning: Failed to save branch-session mapping" >&2
    fi
    
    # Apply layout
    if [ "$layout" != "default" ]; then
        tmux send-keys -t "$session" "TMUX=\$TMUX . /usr/local/lib/hydra/layout.sh && apply_layout $layout" Enter
    fi
    
    # Start AI tool
    if [ -z "$ai_tool" ]; then
        ai_tool="${HYDRA_AI_COMMAND:-claude}"
    fi
    if ! validate_ai_command "$ai_tool"; then
        return 1
    fi
    echo "Starting $ai_tool in session '$session'..." >&2
    send_keys_to_session "$session" "$ai_tool"
    
    # Return session name for caller
    echo "$session"
    return 0
}

# Spawn multiple sessions with same AI tool
# Usage: spawn_bulk <base_branch> <count> <layout> [ai_tool]
spawn_bulk() {
    base_branch="$1"
    count="$2"
    layout="${3:-default}"
    ai_tool="${4:-}"
    
    # Confirm if spawning many sessions
    if [ "$count" -gt 3 ]; then
        printf "Are you sure you want to spawn %d sessions? [y/N] " "$count"
        read -r response
        case "$response" in
            [yY][eE][sS]|[yY])
                ;;
            *)
                echo "Aborted" >&2
                return 1
                ;;
        esac
    fi
    
    echo "Spawning $count sessions based on '$base_branch'..."
    
    succeeded=0
    failed=0
    created_branches=""
    
    i=1
    while [ "$i" -le "$count" ]; do
        branch_name="${base_branch}-${i}"
        echo ""
        echo "[$i/$count] Creating head '$branch_name'..."
        
        if session="$(spawn_single "$branch_name" "$layout" "$ai_tool")"; then
            succeeded=$((succeeded + 1))
            created_branches="$created_branches $branch_name"
            echo "[$i/$count] Successfully created session: $session"
        else
            failed=$((failed + 1))
            echo "[$i/$count] Failed to create head '$branch_name'" >&2
            
            # Ask whether to continue or rollback
            if [ "$i" -lt "$count" ]; then
                printf "Continue with remaining heads? [y/N] "
                read -r response
                case "$response" in
                    [yY][eE][sS]|[yY])
                        ;;
                    *)
                        echo "Rolling back created heads..."
                        for b in $created_branches; do
                            echo "Removing $b..."
                            cmd_kill "$b" >/dev/null 2>&1 || true
                        done
                        return 1
                        ;;
                esac
            fi
        fi
        
        i=$((i + 1))
    done
    
    echo ""
    echo "Bulk spawn complete:"
    echo "  Succeeded: $succeeded"
    echo "  Failed: $failed"
    
    # Switch to first created session if in terminal
    if [ -t 0 ] && [ -t 1 ] && [ "$succeeded" -gt 0 ]; then
        first_branch="$(echo "$created_branches" | cut -d' ' -f2)"
        first_session="$(get_session_for_branch "$first_branch" 2>/dev/null || true)"
        if [ -n "$first_session" ]; then
            echo ""
            echo "Switching to first session '$first_session'..."
            switch_to_session "$first_session"
        fi
    fi
    
    return 0
}

# Spawn sessions with mixed AI agents
# Usage: spawn_bulk_mixed <base_branch> <agents_spec> <layout>
# agents_spec format: "claude:2,aider:1,codex:1"
spawn_bulk_mixed() {
    base_branch="$1"
    agents_spec="$2"
    layout="${3:-default}"
    
    echo "Parsing agents specification: $agents_spec"
    
    # Parse the agents spec and create sessions
    total_count=0
    session_num=1
    succeeded=0
    failed=0
    created_branches=""
    
    # Process each agent:count pair
    while [ -n "$agents_spec" ]; do
        # Extract first agent:count pair
        pair="${agents_spec%%,*}"
        
        # Remove processed pair from spec
        if [ "$pair" = "$agents_spec" ]; then
            agents_spec=""
        else
            agents_spec="${agents_spec#*,}"
        fi
        
        # Check if pair contains a colon
        case "$pair" in
            *:*)
                # Parse agent and count
                agent="${pair%%:*}"
                agent_count="${pair#*:}"
                ;;
            *)
                echo "Error: Invalid agent specification: $pair" >&2
                return 1
                ;;
        esac
        
        # Validate
        if [ -z "$agent" ] || [ -z "$agent_count" ]; then
            echo "Error: Invalid agent specification: $pair" >&2
            return 1
        fi
        
        if ! echo "$agent_count" | grep -q '^[0-9]\+$' || [ "$agent_count" -lt 1 ]; then
            echo "Error: Invalid count for $agent: $agent_count" >&2
            return 1
        fi
        
        if ! validate_ai_command "$agent"; then
            return 1
        fi
        
        total_count=$((total_count + agent_count))
    done
    
    # Confirm if spawning many sessions
    if [ "$total_count" -gt 3 ]; then
        printf "Are you sure you want to spawn %d sessions? [y/N] " "$total_count"
        read -r response
        case "$response" in
            [yY][eE][sS]|[yY])
                ;;
            *)
                echo "Aborted" >&2
                return 1
                ;;
        esac
    fi
    
    # Reset agents_spec for actual processing
    agents_spec="$2"
    
    echo "Spawning $total_count sessions with mixed agents..."
    
    # Process each agent:count pair again for actual spawning
    while [ -n "$agents_spec" ]; do
        # Extract first agent:count pair
        pair="${agents_spec%%,*}"
        
        # Remove processed pair from spec
        if [ "$pair" = "$agents_spec" ]; then
            agents_spec=""
        else
            agents_spec="${agents_spec#*,}"
        fi
        
        # Parse agent and count (already validated in first loop)
        agent="${pair%%:*}"
        agent_count="${pair#*:}"
        
        echo ""
        echo "Creating $agent_count session(s) with $agent..."
        
        i=1
        while [ "$i" -le "$agent_count" ]; do
            branch_name="${base_branch}-${session_num}"
            echo ""
            echo "[$session_num/$total_count] Creating head '$branch_name' with $agent..."
            
            if session="$(spawn_single "$branch_name" "$layout" "$agent")"; then
                succeeded=$((succeeded + 1))
                created_branches="$created_branches $branch_name"
                echo "[$session_num/$total_count] Successfully created session: $session"
            else
                failed=$((failed + 1))
                echo "[$session_num/$total_count] Failed to create head '$branch_name'" >&2
                
                # Ask whether to continue or rollback
                if [ "$session_num" -lt "$total_count" ]; then
                    printf "Continue with remaining heads? [y/N] "
                    read -r response
                    case "$response" in
                        [yY][eE][sS]|[yY])
                            ;;
                        *)
                            echo "Rolling back created heads..."
                            for b in $created_branches; do
                                echo "Removing $b..."
                                cmd_kill "$b" >/dev/null 2>&1 || true
                            done
                            return 1
                            ;;
                    esac
                fi
            fi
            
            i=$((i + 1))
            session_num=$((session_num + 1))
        done
    done
    
    echo ""
    echo "Bulk spawn complete:"
    echo "  Succeeded: $succeeded"
    echo "  Failed: $failed"
    
    # Switch to first created session if in terminal
    if [ -t 0 ] && [ -t 1 ] && [ "$succeeded" -gt 0 ]; then
        first_branch="$(echo "$created_branches" | cut -d' ' -f2)"
        first_session="$(get_session_for_branch "$first_branch" 2>/dev/null || true)"
        if [ -n "$first_session" ]; then
            echo ""
            echo "Switching to first session '$first_session'..."
            switch_to_session "$first_session"
        fi
    fi
    
    return 0
}

# Main command dispatcher
main() {
    init_hydra_home
    
    case "${1:-}" in
        spawn)
            shift
            cmd_spawn "$@"
            ;;
        list)
            shift
            cmd_list "$@"
            ;;
        switch)
            shift
            cmd_switch "$@"
            ;;
        kill)
            shift
            cmd_kill "$@"
            ;;
        regenerate)
            shift
            cmd_regenerate "$@"
            ;;
        status)
            shift
            cmd_status "$@"
            ;;
        doctor)
            shift
            cmd_doctor "$@"
            ;;
        dashboard)
            shift
            cmd_dashboard "$@"
            ;;
        cycle-layout)
            shift
            cmd_cycle_layout "$@"
            ;;
        completion)
            shift
            cmd_completion "$@"
            ;;
        version|-v|--version)
            echo "Hydra version $HYDRA_VERSION"
            ;;
        help|-h|--help)
            usage
            ;;
        *)
            if [ -z "${1:-}" ]; then
                usage
            else
                echo "Error: Unknown command '$1'" >&2
                echo "Run 'hydra help' for usage information" >&2
                exit 1
            fi
            ;;
    esac
}

# Command implementations
cmd_spawn() {
    # Parse arguments
    branch=""
    layout="default"
    count=1
    ai_tool=""
    agents_spec=""
    issue_num=""
    
    while [ $# -gt 0 ]; do
        case "$1" in
            -l|--layout)
                shift
                layout="$1"
                shift
                ;;
            -n|--count)
                shift
                count="$1"
                shift
                ;;
            --ai)
                shift
                ai_tool="$1"
                shift
                ;;
            --agents)
                shift
                agents_spec="$1"
                shift
                ;;
            -i|--issue)
                shift
                issue_num="$1"
                shift
                ;;
            -*)
                echo "Error: Unknown option '$1'" >&2
                echo "Usage: hydra spawn <branch> [-l|--layout <layout>] [-n|--count <number>] [--ai <tool>] [--agents <spec>]" >&2
                echo "       hydra spawn --issue <number> [-l|--layout <layout>]" >&2
                exit 1
                ;;
            *)
                if [ -z "$branch" ]; then
                    branch="$1"
                else
                    echo "Error: Too many arguments" >&2
                    echo "Usage: hydra spawn <branch> [-l|--layout <layout>] [-n|--count <number>] [--ai <tool>] [--agents <spec>]" >&2
                    echo "       hydra spawn --issue <number> [-l|--layout <layout>]" >&2
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Handle GitHub issue mode
    if [ -n "$issue_num" ]; then
        if [ -n "$branch" ]; then
            echo "Error: Cannot specify both branch name and issue number" >&2
            exit 1
        fi
        
        # Check for incompatible options
        if [ "$count" -gt 1 ] || [ -n "$agents_spec" ]; then
            echo "Error: Cannot use bulk spawn options with --issue" >&2
            exit 1
        fi
        
        # Generate branch from issue
        branch="$(spawn_from_issue "$issue_num")" || exit 1
    fi
    
    if [ -z "$branch" ]; then
        echo "Error: Branch name is required" >&2
        echo "Usage: hydra spawn <branch> [-l|--layout <layout>] [-n|--count <number>] [--ai <tool>] [--agents <spec>]" >&2
        echo "       hydra spawn --issue <number> [-l|--layout <layout>]" >&2
        exit 1
    fi
    
    # Validate count
    if ! echo "$count" | grep -q '^[0-9]\+$' || [ "$count" -lt 1 ] || [ "$count" -gt 10 ]; then
        echo "Error: Count must be a number between 1 and 10" >&2
        exit 1
    fi
    
    # Handle mutually exclusive options
    if [ -n "$agents_spec" ] && [ -n "$ai_tool" ]; then
        echo "Error: Cannot use both --ai and --agents options" >&2
        exit 1
    fi
    
    # If agents spec is provided, delegate to bulk spawn with mixed agents
    if [ -n "$agents_spec" ]; then
        spawn_bulk_mixed "$branch" "$agents_spec" "$layout"
        return $?
    fi
    
    # If count > 1, delegate to bulk spawn
    if [ "$count" -gt 1 ]; then
        spawn_bulk "$branch" "$count" "$layout" "$ai_tool"
        return $?
    fi
    
    # Single spawn - use helper function
    if session="$(spawn_single "$branch" "$layout" "$ai_tool")"; then
        # Switch to the new session (only in terminal)
        if [ -t 0 ] && [ -t 1 ]; then
            echo "Switching to session '$session'..."
            switch_to_session "$session"
        else
            echo "Session '$session' created successfully (not switching - not in terminal)"
        fi
        return 0
    else
        return 1
    fi
}

cmd_list() {
    # Check if we have any mappings
    if [ ! -f "$HYDRA_MAP" ] || [ ! -s "$HYDRA_MAP" ]; then
        echo "No active Hydra heads"
        return 0
    fi
    
    # List all sessions with their branch names
    echo "Active Hydra heads:"
    echo ""
    
    # Read mapping file and display status
    while IFS=' ' read -r branch session; do
        # Check if session still exists
        if tmux_session_exists "$session"; then
            # Check if it's the current session
            current_session="$(tmux display-message -p '#{session_name}' 2>/dev/null || true)"
            if [ "$session" = "$current_session" ]; then
                echo "* $branch -> $session (current)"
            else
                echo "  $branch -> $session"
            fi
        else
            echo "  $branch -> $session (dead)"
        fi
    done < "$HYDRA_MAP"
}

cmd_switch() {
    # Interactive session switcher
    if [ ! -f "$HYDRA_MAP" ] || [ ! -s "$HYDRA_MAP" ]; then
        echo "No active Hydra heads to switch to"
        return 1
    fi
    
    # If inside tmux, use tmux's interactive switcher
    if [ -n "${TMUX:-}" ]; then
        # Build session list for fzf or simple menu
        sessions=""
        while IFS=' ' read -r branch session; do
            if tmux_session_exists "$session"; then
                sessions="$sessions$branch ($session)\n"
            fi
        done < "$HYDRA_MAP"
        
        if [ -z "$sessions" ]; then
            echo "No active sessions found"
            return 1
        fi
        
        # Use fzf if available, otherwise simple menu
        if command -v fzf >/dev/null 2>&1; then
            selection="$(printf "%b" "$sessions" | fzf --prompt="Switch to: " --height=10)"
        else
            echo "Active sessions:"
            i=1
            printf "%b" "$sessions" | while IFS= read -r line; do
                echo "$i) $line"
                i=$((i + 1))
            done
            printf "Select session (1-%d): " "$(printf "%b" "$sessions" | wc -l | tr -d ' ')"
            read -r choice
            selection="$(printf "%b" "$sessions" | sed -n "${choice}p")"
        fi
        
        if [ -n "$selection" ]; then
            # Extract session name from selection
            session_name="$(echo "$selection" | sed 's/.*(\(.*\))/\1/')"
            switch_to_session "$session_name"
        fi
    else
        echo "Error: Not inside a tmux session"
        echo "Use 'tmux attach -t <session>' to attach to a session"
        return 1
    fi
}

cmd_kill() {
    branch="${1:-}"
    
    if [ -z "$branch" ]; then
        echo "Error: Branch name required" >&2
        echo "Usage: hydra kill <branch>" >&2
        return 1
    fi
    
    # Get session for branch
    session="$(get_session_for_branch "$branch" 2>/dev/null || true)"
    
    if [ -z "$session" ]; then
        echo "No session found for branch '$branch'"
        return 1
    fi
    
    # Skip confirmation in non-interactive environments (CI, tests)
    if [ -t 0 ] && [ -z "${CI:-}" ] && [ -z "${HYDRA_NONINTERACTIVE:-}" ]; then
        # Interactive mode - ask for confirmation
        printf "Kill hydra head '%s' (session: %s)? [y/N] " "$branch" "$session"
        read -r response
        case "$response" in
            [yY][eE][sS]|[yY])
                ;;
            *)
                echo "Aborted"
                return 0
                ;;
        esac
    else
        # Non-interactive mode - proceed without confirmation
        echo "Killing hydra head '$branch' (session: $session) [non-interactive mode]"
    fi
    
    # Kill tmux session
    if tmux_session_exists "$session"; then
        echo "Killing tmux session '$session'..."
        tmux kill-session -t "$session" 2>/dev/null || true
    fi
    
    # Remove mapping
    remove_mapping "$branch"
    
    # Delete worktree
    repo_root="$(git rev-parse --show-toplevel 2>/dev/null || true)"
    if [ -n "$repo_root" ]; then
        worktree_path="$repo_root/../hydra-$branch"
        if [ -d "$worktree_path" ]; then
            # Normalize the path by cd'ing to it and getting pwd
            normalized_path="$(cd "$worktree_path" && pwd)" || normalized_path="$worktree_path"
            echo "Removing worktree at '$normalized_path'..."
            delete_worktree "$normalized_path"
        fi
    fi
    
    echo "Hydra head '$branch' has been killed"
}

cmd_regenerate() {
    echo "Regenerating tmux sessions for existing worktrees..."
    
    # Get repository root
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        echo "Error: Not in a git repository" >&2
        return 1
    fi
    
    repo_root="$(git rev-parse --show-toplevel)"
    parent_dir="$(dirname "$repo_root")"
    
    # Find all hydra worktrees
    regenerated=0
    skipped=0
    
    for dir in "$parent_dir"/hydra-*; do
        if [ ! -d "$dir" ]; then
            continue
        fi
        
        # Extract branch name from directory
        branch="$(basename "$dir" | sed 's/^hydra-//')"
        
        # Check if session already exists
        existing_session="$(get_session_for_branch "$branch" 2>/dev/null || true)"
        if [ -n "$existing_session" ] && tmux_session_exists "$existing_session"; then
            echo "Session already exists for '$branch', skipping..."
            skipped=$((skipped + 1))
            continue
        fi
        
        # Generate session name
        session="$(generate_session_name "$branch")"
        
        # Create session
        echo "Creating session '$session' for branch '$branch'..."
        if create_session "$session" "$dir"; then
            add_mapping "$branch" "$session"
            regenerated=$((regenerated + 1))
        else
            echo "Failed to create session for '$branch'" >&2
        fi
    done
    
    echo ""
    echo "Regeneration complete:"
    echo "  Created: $regenerated"
    echo "  Skipped: $skipped"
}

cmd_status() {
    echo "Hydra Status Report"
    echo "=================="
    echo ""
    
    # System info
    echo "System Information:"
    echo "  Hydra Version: $HYDRA_VERSION"
    echo "  tmux Version: $(tmux -V 2>/dev/null || echo "Not installed")"
    echo "  Git Version: $(git --version 2>/dev/null || echo "Not installed")"
    echo ""
    
    # Repository info
    if git rev-parse --git-dir >/dev/null 2>&1; then
        repo_root="$(git rev-parse --show-toplevel)"
        echo "Repository:"
        echo "  Path: $repo_root"
        echo "  Current Branch: $(git branch --show-current 2>/dev/null || echo "Unknown")"
        echo ""
    fi
    
    # Session info
    if [ ! -f "$HYDRA_MAP" ] || [ ! -s "$HYDRA_MAP" ]; then
        echo "No active Hydra heads"
        return 0
    fi
    
    echo "Active Heads:"
    active=0
    dead=0
    
    while IFS=' ' read -r branch session; do
        if tmux_session_exists "$session"; then
            echo "  âœ“ $branch -> $session"
            active=$((active + 1))
        else
            echo "  âœ— $branch -> $session (dead)"
            dead=$((dead + 1))
        fi
    done < "$HYDRA_MAP"
    
    echo ""
    echo "Summary:"
    echo "  Active Sessions: $active"
    echo "  Dead Sessions: $dead"
    
    if [ "$dead" -gt 0 ]; then
        echo ""
        echo "Note: Dead sessions can be regenerated with 'hydra regenerate'"
    fi
}

cmd_doctor() {
    echo "Hydra Doctor - System Health Check"
    echo "================================="
    echo ""
    
    # Check dependencies
    echo "Checking dependencies..."
    errors=0
    
    # Check tmux
    if command -v tmux >/dev/null 2>&1; then
        if check_tmux_version; then
            echo "  âœ“ tmux $(tmux -V)"
        else
            echo "  âœ— tmux version too old (need 3.0+)"
            errors=$((errors + 1))
        fi
    else
        echo "  âœ— tmux not installed"
        errors=$((errors + 1))
    fi
    
    # Check git
    if command -v git >/dev/null 2>&1; then
        echo "  âœ“ $(git --version)"
    else
        echo "  âœ— git not installed"
        errors=$((errors + 1))
    fi
    
    # Check performance
    echo ""
    echo "Running performance tests..."
    
    # Test command dispatch
    start_time=$(date +%s%N 2>/dev/null || date +%s)
    "$0" version >/dev/null 2>&1
    end_time=$(date +%s%N 2>/dev/null || date +%s)
    
    if [ ${#start_time} -gt 10 ]; then
        # Nanosecond precision available
        elapsed=$(( (end_time - start_time) / 1000000 ))
        echo "  Command dispatch: ${elapsed}ms"
    else
        # Only second precision
        echo "  Command dispatch: <1000ms (no precise timing available)"
    fi
    
    # Check state file
    echo ""
    echo "Checking state management..."
    if [ -f "$HYDRA_MAP" ]; then
        echo "  âœ“ State file exists: $HYDRA_MAP"
        echo "    Size: $(wc -c < "$HYDRA_MAP") bytes"
        echo "    Entries: $(wc -l < "$HYDRA_MAP" | tr -d ' ')"
    else
        echo "  â„¹ No state file (this is normal for new installations)"
    fi
    
    # Summary
    echo ""
    if [ "$errors" -eq 0 ]; then
        echo "âœ“ All checks passed! Hydra is ready to use."
    else
        echo "âœ— Found $errors issue(s). Please install missing dependencies."
        return 1
    fi
}

cmd_dashboard() {
    show_dashboard
}

cmd_cycle_layout() {
    cycle_layout
}

cmd_completion() {
    shell="${1:-bash}"
    generate_completion "$shell"
}

# Run main function with all arguments
main "$@"