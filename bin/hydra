#!/bin/sh
# Hydra - POSIX-compliant CLI for managing parallel AI coding sessions
# Wraps tmux â‰¥ 3.0 and git worktree

set -eu

# Global variables
HYDRA_HOME="${HYDRA_HOME:-$HOME/.hydra}"
HYDRA_MAP="$HYDRA_HOME/map"
HYDRA_VERSION="0.2.0"

# Source helper libraries
# Detect if we're running from source or installed
if [ -f "$(dirname "$0")/../lib/git.sh" ]; then
    # Running from source directory
    HYDRA_LIB_DIR="$(dirname "$0")/../lib"
else
    # Running from installed location
    HYDRA_LIB_DIR="/usr/local/lib/hydra"
fi
# shellcheck source=../lib/git.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/git.sh"
# shellcheck source=../lib/tmux.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/tmux.sh"
# shellcheck source=../lib/layout.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/layout.sh"
# shellcheck source=../lib/state.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/state.sh"
# shellcheck source=../lib/completion.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/completion.sh"
# shellcheck source=../lib/dashboard.sh
# shellcheck disable=SC1091
. "$HYDRA_LIB_DIR/dashboard.sh"

# Initialize Hydra home directory
init_hydra_home() {
    if [ ! -d "$HYDRA_HOME" ]; then
        mkdir -p "$HYDRA_HOME"
    fi
    if [ ! -f "$HYDRA_MAP" ]; then
        touch "$HYDRA_MAP"
    fi
}

# Display usage information
usage() {
    cat <<EOF
hydra - Manage parallel AI coding sessions with tmux and git worktree

Usage: hydra <command> [options]

Commands:
  spawn <branch>    Create a new worktree and tmux session
  list              List all active Hydra heads
  switch            Switch to a different head (interactive)
  kill <branch>     Remove a worktree and its tmux session
  regenerate        Restore tmux sessions for existing worktrees
  status            Show health status of all heads
  doctor            Check system performance
  dashboard         View all sessions in a single dashboard
  cycle-layout      Cycle through tmux pane layouts
  completion        Generate shell completion scripts
  version           Show version information

Options:
  -h, --help        Show this help message

Environment:
  HYDRA_HOME        Directory for runtime files (default: ~/.hydra)
EOF
}

# Main command dispatcher
main() {
    init_hydra_home
    
    case "${1:-}" in
        spawn)
            shift
            cmd_spawn "$@"
            ;;
        list)
            shift
            cmd_list "$@"
            ;;
        switch)
            shift
            cmd_switch "$@"
            ;;
        kill)
            shift
            cmd_kill "$@"
            ;;
        regenerate)
            shift
            cmd_regenerate "$@"
            ;;
        status)
            shift
            cmd_status "$@"
            ;;
        doctor)
            shift
            cmd_doctor "$@"
            ;;
        dashboard)
            shift
            cmd_dashboard "$@"
            ;;
        dashboard-exit)
            # Internal command for exiting dashboard
            cmd_dashboard_exit
            ;;
        completion)
            shift
            cmd_completion "$@"
            ;;
        cycle-layout)
            shift
            cmd_cycle_layout "$@"
            ;;
        version|--version|-v)
            echo "hydra version $HYDRA_VERSION"
            ;;
        help|--help|-h|"")
            usage
            ;;
        *)
            echo "Error: Unknown command '$1'" >&2
            echo "Run 'hydra help' for usage information" >&2
            exit 1
            ;;
    esac
}

# Command implementations
cmd_spawn() {
    # Parse arguments
    branch=""
    layout="default"
    
    while [ $# -gt 0 ]; do
        case "$1" in
            -l|--layout)
                shift
                layout="$1"
                shift
                ;;
            -*)
                echo "Error: Unknown option '$1'" >&2
                echo "Usage: hydra spawn <branch> [-l|--layout <layout>]" >&2
                exit 1
                ;;
            *)
                if [ -z "$branch" ]; then
                    branch="$1"
                else
                    echo "Error: Too many arguments" >&2
                    echo "Usage: hydra spawn <branch> [-l|--layout <layout>]" >&2
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    if [ -z "$branch" ]; then
        echo "Error: Branch name is required" >&2
        echo "Usage: hydra spawn <branch> [-l|--layout <layout>]" >&2
        exit 1
    fi
    
    # Check tmux availability
    if ! check_tmux_version; then
        exit 1
    fi
    
    # Check if we're in a git repository
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        echo "Error: Not in a git repository" >&2
        exit 1
    fi
    
    # Get the repository root
    repo_root="$(git rev-parse --show-toplevel)"
    worktree_path="$repo_root/../hydra-$branch"
    
    # Check if branch already has a session
    existing_session="$(get_session_for_branch "$branch" 2>/dev/null || true)"
    if [ -n "$existing_session" ] && tmux_session_exists "$existing_session"; then
        echo "Error: Branch '$branch' already has an active session '$existing_session'" >&2
        echo "Use 'hydra switch' to switch to it" >&2
        exit 1
    fi
    
    # Create worktree
    echo "Creating worktree for branch '$branch'..."
    if ! create_worktree "$branch" "$worktree_path"; then
        exit 1
    fi
    
    # Generate session name
    session="$(generate_session_name "$branch")"
    
    # Create tmux session
    echo "Creating tmux session '$session'..."
    if ! create_session "$session" "$worktree_path"; then
        # Clean up worktree if session creation failed
        delete_worktree "$worktree_path" 2>/dev/null || true
        exit 1
    fi
    
    # Add mapping
    if ! add_mapping "$branch" "$session"; then
        echo "Warning: Failed to save branch-session mapping" >&2
    fi
    
    # Apply layout
    if [ "$layout" != "default" ]; then
        tmux send-keys -t "$session" "TMUX=\$TMUX . /usr/local/lib/hydra/layout.sh && apply_layout $layout" Enter
    fi
    
    # Start AI tool
    ai_command="${HYDRA_AI_COMMAND:-claude}"
    if ! validate_ai_command "$ai_command"; then
        return 1
    fi
    echo "Starting $ai_command in session '$session'..."
    send_keys_to_session "$session" "$ai_command"
    
    # Switch to the new session (only in terminal)
    if [ -t 0 ] && [ -t 1 ]; then
        echo "Switching to session '$session'..."
        switch_to_session "$session"
    else
        echo "Session '$session' created successfully (not switching - not in terminal)"
    fi
}

cmd_list() {
    # Check if we have any mappings
    if [ ! -f "$HYDRA_MAP" ] || [ ! -s "$HYDRA_MAP" ]; then
        echo "No active Hydra heads"
        return 0
    fi
    
    # Print header
    printf "%-20s %-20s %-10s %s\n" "BRANCH" "SESSION" "STATUS" "PATH"
    printf "%-20s %-20s %-10s %s\n" "------" "-------" "------" "----"
    
    # Get repository root
    repo_root="$(git rev-parse --show-toplevel 2>/dev/null || echo ".")"
    
    # List all mappings
    while IFS=' ' read -r branch session; do
        # Skip empty lines
        if [ -z "$branch" ] || [ -z "$session" ]; then
            continue
        fi
        # Check session status
        if tmux_session_exists "$session"; then
            status="active"
        else
            status="dead"
        fi
        
        # Find worktree path (may not exist)
        worktree_path="$(find_worktree_path "$branch" 2>/dev/null || true)"
        
        # Make path relative if possible
        if [ -n "$worktree_path" ]; then
            case "$worktree_path" in
                "$repo_root"/../*)
                    worktree_path="../${worktree_path#"$repo_root"/../}"
                    ;;
            esac
        else
            worktree_path="(not found)"
        fi
        
        # Print row
        printf "%-20s %-20s %-10s %s\n" \
            "$(echo "$branch" | cut -c1-20)" \
            "$(echo "$session" | cut -c1-20)" \
            "$status" \
            "$worktree_path"
    done < "$HYDRA_MAP"
}

cmd_switch() {
    # Check if we have any mappings
    if [ ! -f "$HYDRA_MAP" ] || [ ! -s "$HYDRA_MAP" ]; then
        echo "No active Hydra heads to switch to"
        exit 1
    fi
    
    # Check tmux availability
    if ! check_tmux_version; then
        exit 1
    fi
    
    # Count active sessions
    active_count=0
    while IFS=' ' read -r branch session; do
        if tmux_session_exists "$session"; then
            active_count=$((active_count + 1))
        fi
    done < "$HYDRA_MAP"
    
    if [ "$active_count" -eq 0 ]; then
        echo "No active sessions found"
        echo "Use 'hydra regenerate' to restore sessions"
        exit 1
    fi
    
    # Record start time for performance tracking
    start_time="$(date +%s%N 2>/dev/null || date +%s)"
    
    # Use fzf if available
    if command -v fzf >/dev/null 2>&1; then
        # Build list for fzf
        selected="$(
            while IFS=' ' read -r branch session; do
                if tmux_session_exists "$session"; then
                    echo "$branch -> $session"
                fi
            done < "$HYDRA_MAP" | fzf --prompt="Select head: " --height=10 --reverse
        )"
        
        if [ -z "$selected" ]; then
            echo "No selection made"
            exit 1
        fi
        
        # Extract session name
        target_session="${selected##* }"
    else
        # Fallback to numeric selection
        echo "Active Hydra heads:"
        num=1
        
        # Create temporary file for menu items
        tmpfile="$(mktemp)" || exit 1
        trap 'rm -f "$tmpfile"' EXIT INT TERM
        
        while IFS=' ' read -r branch session; do
            if tmux_session_exists "$session"; then
                echo "$num) $branch -> $session"
                echo "$num $session" >> "$tmpfile"
                num=$((num + 1))
            fi
        done < "$HYDRA_MAP"
        
        printf "Select head (1-%d): " "$((num - 1))"
        read -r selection
        
        # Validate selection
        if ! echo "$selection" | grep -q '^[0-9]\+$'; then
            echo "Error: Invalid selection" >&2
            exit 1
        fi
        
        # Find the selected session
        target_session=""
        while IFS=' ' read -r menu_num menu_session; do
            if [ "$menu_num" = "$selection" ]; then
                target_session="$menu_session"
                break
            fi
        done < "$tmpfile"
        
        rm -f "$tmpfile"
        trap - EXIT INT TERM
        
        if [ -z "$target_session" ]; then
            echo "Error: Invalid selection" >&2
            exit 1
        fi
    fi
    
    # Switch to the selected session
    echo "Switching to session '$target_session'..."
    if ! switch_to_session "$target_session"; then
        exit 1
    fi
    
    # Record end time and calculate duration
    end_time="$(date +%s%N 2>/dev/null || date +%s)"
    
    # Calculate duration in milliseconds if nanoseconds are available
    if echo "$start_time" | grep -q '[0-9]\{10,\}'; then
        # Have nanoseconds
        duration_ns=$((end_time - start_time))
        duration_ms=$((duration_ns / 1000000))
        echo "Switch completed in ${duration_ms}ms"
    fi
}

cmd_kill() {
    branch="${1:-}"
    
    if [ -z "$branch" ]; then
        echo "Error: Branch name is required" >&2
        echo "Usage: hydra kill <branch>" >&2
        exit 1
    fi
    
    # Get session for branch
    session="$(get_session_for_branch "$branch" 2>/dev/null || true)"
    
    if [ -z "$session" ]; then
        echo "Error: No session found for branch '$branch'" >&2
        exit 1
    fi
    
    # Get repository root
    repo_root="$(git rev-parse --show-toplevel 2>/dev/null || echo ".")"
    
    # Find worktree path - try multiple methods
    worktree_path="$(find_worktree_path "$branch" 2>/dev/null || true)"
    
    # If not found by branch, try by pattern (handles case where branch was already deleted)
    if [ -z "$worktree_path" ]; then
        worktree_path="$(find_worktree_by_pattern "hydra-$branch" 2>/dev/null || true)"
    fi
    
    # Kill tmux session if it exists
    if tmux_session_exists "$session"; then
        echo "Killing tmux session '$session'..."
        if ! kill_session "$session"; then
            echo "Warning: Failed to kill tmux session" >&2
        fi
    fi
    
    # Remove worktree if it exists
    if [ -n "$worktree_path" ] && [ -d "$worktree_path" ]; then
        echo "Removing worktree at '$worktree_path'..."
        # Check if branch still exists - if not, force removal
        if ! git_branch_exists "$branch"; then
            # Branch doesn't exist, force removal
            if ! delete_worktree "$worktree_path" "force"; then
                echo "Error: Failed to remove worktree" >&2
                echo "You may need to manually clean up: $worktree_path" >&2
                # Don't exit, still remove mapping
            fi
        else
            # Branch exists, normal removal
            if ! delete_worktree "$worktree_path"; then
                echo "Error: Failed to remove worktree" >&2
                echo "You may need to manually clean up: $worktree_path" >&2
                # Don't exit, still remove mapping
            fi
        fi
    else
        # Check if expected worktree path exists (fallback)
        expected_path="$repo_root/../hydra-$branch"
        if [ -d "$expected_path" ]; then
            echo "Found orphaned worktree at '$expected_path'..."
            echo "Attempting to remove it..."
            # Try normal remove first, then force if needed
            if git worktree remove "$expected_path" 2>/dev/null; then
                echo "Successfully removed orphaned worktree"
            elif git worktree remove --force "$expected_path" 2>/dev/null; then
                echo "Successfully removed orphaned worktree (forced)"
            else
                echo "Warning: Could not remove orphaned worktree at: $expected_path" >&2
                echo "You may need to manually run: git worktree remove --force '$expected_path'" >&2
            fi
        fi
    fi
    
    # Remove mapping
    echo "Removing branch-session mapping..."
    if ! remove_mapping "$branch"; then
        echo "Warning: Failed to remove mapping" >&2
    fi
    
    echo "Hydra head '$branch' has been killed"
}

cmd_regenerate() {
    # Check tmux availability
    if ! check_tmux_version; then
        exit 1
    fi
    
    if [ ! -f "$HYDRA_MAP" ] || [ ! -s "$HYDRA_MAP" ]; then
        echo "No Hydra heads to regenerate"
        return 0
    fi
    
    regenerated=0
    failed=0
    
    # Get repository root
    repo_root="$(git rev-parse --show-toplevel 2>/dev/null || echo ".")"
    
    echo "Regenerating Hydra sessions..."
    
    while IFS=' ' read -r branch session; do
        # Skip if session already exists
        if tmux_session_exists "$session"; then
            echo "Session '$session' for branch '$branch' already exists"
            continue
        fi
        
        # Find worktree path (may not exist)
        worktree_path="$(find_worktree_path "$branch" 2>/dev/null || true)"
        
        if [ -z "$worktree_path" ] || [ ! -d "$worktree_path" ]; then
            echo "Warning: No worktree found for branch '$branch'"
            echo "  Use 'hydra spawn $branch' to create it"
            failed=$((failed + 1))
            continue
        fi
        
        # Create session
        echo "Regenerating session '$session' for branch '$branch'..."
        if create_session "$session" "$worktree_path"; then
            regenerated=$((regenerated + 1))
            
            # Start AI tool
            ai_command="${HYDRA_AI_COMMAND:-claude}"
            if validate_ai_command "$ai_command"; then
                send_keys_to_session "$session" "$ai_command"
            else
                echo "Warning: Skipping AI tool startup for session '$session'" >&2
            fi
        else
            echo "Error: Failed to create session '$session'" >&2
            failed=$((failed + 1))
        fi
    done < "$HYDRA_MAP"
    
    # Clean up invalid mappings
    if [ "$failed" -gt 0 ]; then
        echo "Cleaning up invalid mappings..."
        cleanup_mappings
    fi
    
    echo ""
    echo "Regeneration complete:"
    echo "  Regenerated: $regenerated session(s)"
    if [ "$failed" -gt 0 ]; then
        echo "  Failed: $failed session(s)"
    fi
}

cmd_status() {
    echo "Hydra Status Report"
    echo "=================="
    echo ""
    
    # Check git repository
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        echo "Error: Not in a git repository" >&2
        exit 1
    fi
    
    # Check tmux
    if ! check_tmux_version >/dev/null 2>&1; then
        echo "tmux: Not available or version too old"
    else
        echo "tmux: $(tmux -V)"
    fi
    echo ""
    
    # Analyze mappings
    mapped_branches=""
    mapped_sessions=""
    orphaned_mappings=0
    
    if [ -f "$HYDRA_MAP" ] && [ -s "$HYDRA_MAP" ]; then
        while IFS=' ' read -r branch session; do
            mapped_branches="$mapped_branches $branch"
            mapped_sessions="$mapped_sessions $session"
            
            # Check for orphaned mappings
            if ! git_branch_exists "$branch" || ! tmux_session_exists "$session"; then
                orphaned_mappings=$((orphaned_mappings + 1))
            fi
        done < "$HYDRA_MAP"
    fi
    
    # Get all worktrees
    echo "Git Worktrees:"
    worktree_count=0
    unmapped_worktrees=0
    
    # Use temporary file to avoid pipe subshell issues
    tmpfile="$(mktemp)" || {
        echo "Error: Failed to create temporary file" >&2
        echo ""
        echo "Summary:"
        echo "  Hydra home: $HYDRA_HOME"
        echo "  Error: Unable to complete status report"
        return 0
    }
    trap 'rm -f "$tmpfile"' EXIT INT TERM
    
    git worktree list --porcelain 2>/dev/null > "$tmpfile"
    
    while IFS= read -r line; do
        case "$line" in
            "worktree "*)
                # Path not needed for this check
                ;;
            "branch refs/heads/"*)
                worktree_branch="${line#branch refs/heads/}"
                worktree_count=$((worktree_count + 1))
                
                # Check if this worktree has a mapping
                mapped=0
                for mb in $mapped_branches; do
                    if [ "$mb" = "$worktree_branch" ]; then
                        mapped=1
                        break
                    fi
                done
                
                if [ "$mapped" -eq 0 ]; then
                    unmapped_worktrees=$((unmapped_worktrees + 1))
                    echo "  - $worktree_branch (no session)"
                else
                    # Get session name
                    session="$(get_session_for_branch "$worktree_branch" 2>/dev/null || echo "(unknown)")"
                    if tmux_session_exists "$session"; then
                        echo "  - $worktree_branch -> $session (active)"
                    else
                        echo "  - $worktree_branch -> $session (dead)"
                    fi
                fi
                ;;
        esac
    done < "$tmpfile"
    
    rm -f "$tmpfile"
    trap - EXIT INT TERM
    
    echo ""
    echo "tmux Sessions:"
    session_count=0
    unmapped_sessions=0
    
    # List all tmux sessions using temp file
    tmpfile2="$(mktemp)" || {
        echo "Error: Failed to create temporary file" >&2
        echo ""
        echo "Summary:"
        echo "  Hydra home: $HYDRA_HOME"
        echo "  Error: Unable to complete status report"
        return 0
    }
    trap 'rm -f "$tmpfile2"' EXIT INT TERM
    
    tmux list-sessions -F '#{session_name}' 2>/dev/null > "$tmpfile2"
    
    while read -r session; do
        session_count=$((session_count + 1))
        
        # Check if this session has a mapping
        mapped=0
        for ms in $mapped_sessions; do
            if [ "$ms" = "$session" ]; then
                mapped=1
                break
            fi
        done
        
        if [ "$mapped" -eq 0 ]; then
            unmapped_sessions=$((unmapped_sessions + 1))
            echo "  - $session (no branch)"
        else
            # Get branch name
            branch="$(get_branch_for_session "$session" 2>/dev/null || echo "(unknown)")"
            echo "  - $session <- $branch"
        fi
    done < "$tmpfile2"
    
    rm -f "$tmpfile2"
    trap - EXIT INT TERM
    
    echo ""
    echo "Summary:"
    echo "  Hydra home: $HYDRA_HOME"
    echo "  Mapped heads: $(echo "$mapped_branches" | wc -w | tr -d ' ')"
    if [ "$orphaned_mappings" -gt 0 ]; then
        echo "  Orphaned mappings: $orphaned_mappings (run 'hydra regenerate' to fix)"
    fi
    if [ "$unmapped_worktrees" -gt 0 ]; then
        echo "  Unmapped worktrees: $unmapped_worktrees"
    fi
    if [ "$unmapped_sessions" -gt 0 ]; then
        echo "  Unmapped sessions: $unmapped_sessions"
    fi
    
    return 0
}

cmd_doctor() {
    echo "Hydra Doctor - System Health Check"
    echo "================================="
    echo ""
    
    # Check dependencies
    echo "Dependencies:"
    
    # Git
    if command -v git >/dev/null 2>&1; then
        git_version="$(git --version | cut -d' ' -f3)"
        echo "  git: $git_version âœ“"
    else
        echo "  git: NOT FOUND âœ—"
    fi
    
    # tmux
    if command -v tmux >/dev/null 2>&1; then
        tmux_version="$(tmux -V | cut -d' ' -f2)"
        echo "  tmux: $tmux_version"
        
        # Check version requirement
        if check_tmux_version >/dev/null 2>&1; then
            echo "    Version check: âœ“ (>= 3.0)"
        else
            echo "    Version check: âœ— (need >= 3.0)"
        fi
    else
        echo "  tmux: NOT FOUND âœ—"
    fi
    
    # Optional tools
    echo ""
    echo "Optional tools:"
    
    if command -v fzf >/dev/null 2>&1; then
        echo "  fzf: found âœ“ (interactive switching enabled)"
    else
        echo "  fzf: not found (fallback to numeric selection)"
    fi
    
    # Check configured AI tool
    ai_command="${HYDRA_AI_COMMAND:-claude}"
    if command -v "$ai_command" >/dev/null 2>&1; then
        echo "  $ai_command: found âœ“"
    else
        echo "  $ai_command: not found (install $ai_command CLI)"
    fi
    
    # Performance test
    echo ""
    echo "Performance test:"
    
    # Test session switch latency
    if [ -f "$HYDRA_MAP" ] && [ -s "$HYDRA_MAP" ]; then
        # Find an active session to test with
        test_session=""
        while IFS=' ' read -r branch session; do
            if tmux_session_exists "$session"; then
                test_session="$session"
                break
            fi
        done < "$HYDRA_MAP"
        
        if [ -n "$test_session" ] && [ -n "${TMUX:-}" ]; then
            echo "  Testing switch latency to session '$test_session'..."
            
            # Measure 5 switches
            total_ms=0
            switches=5
            i=1
            
            while [ "$i" -le "$switches" ]; do
                start_time="$(date +%s%N 2>/dev/null || date +%s)"
                tmux switch-client -t "$test_session" 2>/dev/null || true
                end_time="$(date +%s%N 2>/dev/null || date +%s)"
                
                # Calculate duration if we have nanoseconds
                if echo "$start_time" | grep -q '[0-9]\{10,\}'; then
                    duration_ns=$((end_time - start_time))
                    duration_ms=$((duration_ns / 1000000))
                    total_ms=$((total_ms + duration_ms))
                    printf "    Switch %d: %dms\n" "$i" "$duration_ms"
                else
                    echo "    (nanosecond precision not available)"
                    break
                fi
                
                i=$((i + 1))
            done
            
            if [ "$total_ms" -gt 0 ]; then
                avg_ms=$((total_ms / switches))
                echo "  Average latency: ${avg_ms}ms"
                
                if [ "$avg_ms" -gt 100 ]; then
                    echo "  WARNING: Switch latency exceeds 100ms target"
                else
                    echo "  Performance: âœ“ (within 100ms target)"
                fi
            fi
        else
            echo "  No active sessions to test (run inside tmux with active heads)"
        fi
    else
        echo "  No Hydra heads configured"
    fi
    
    # File system check
    echo ""
    echo "File system:"
    echo "  HYDRA_HOME: $HYDRA_HOME"
    
    if [ -d "$HYDRA_HOME" ]; then
        echo "    Directory exists: âœ“"
        
        if [ -w "$HYDRA_HOME" ]; then
            echo "    Writable: âœ“"
        else
            echo "    Writable: âœ— (permission denied)"
        fi
        
        if [ -f "$HYDRA_MAP" ]; then
            map_size="$(wc -l < "$HYDRA_MAP" | tr -d ' ')"
            echo "    Map file: $map_size entries"
        else
            echo "    Map file: not found"
        fi
    else
        echo "    Directory exists: âœ— (run any hydra command to create)"
    fi
    
    echo ""
    echo "Diagnosis complete."
}

# Generate shell completion scripts
cmd_completion() {
    shell="${1:-}"
    
    if [ -z "$shell" ]; then
        echo "Usage: hydra completion <shell>"
        echo "Supported shells: bash, zsh, fish"
        echo ""
        echo "Examples:"
        echo "  hydra completion bash > /etc/bash_completion.d/hydra"
        echo "  hydra completion zsh > /usr/local/share/zsh/site-functions/_hydra"
        echo "  hydra completion fish > ~/.config/fish/completions/hydra.fish"
        echo ""
        echo "To install automatically (may require sudo):"
        echo "  hydra completion install [shell]"
        return 1
    fi
    
    case "$shell" in
        bash)
            generate_bash_completion
            ;;
        zsh)
            generate_zsh_completion
            ;;
        fish)
            generate_fish_completion
            ;;
        install)
            shift
            install_completions "$@"
            ;;
        *)
            echo "Error: Unsupported shell '$shell'" >&2
            echo "Supported shells: bash, zsh, fish" >&2
            return 1
            ;;
    esac
}

# Cycle through tmux pane layouts
cmd_cycle_layout() {
    # Must be called from within a tmux session
    if [ -z "${TMUX:-}" ]; then
        echo "Error: Not in a tmux session" >&2
        echo "Use this command from within a Hydra session" >&2
        exit 1
    fi
    
    cycle_layout
}

# Execute main function
main "$@"